import time
from muTel.utils.meta import *
import logging
logging.basicConfig(
            filename=f'{parent}/tmp/logs/MuRecon_{time.strftime("%Y%m%d_%H%M%S")}.log',
            encoding='utf-8',
            level=logging.DEBUG,
            format = '%(message)s'
        )


from IPython.display import HTML, display
from muTel.utils.config import load_cfg
from muTel.dqm.classes.Filters import SLStudy
from muTel.utils.meta import vdrift as default_vdrift

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from scipy.optimize import curve_fit
from scipy.stats import chisquare
import lmfit
from lmfit.models import GaussianModel
import plotly.graph_objs as go
import matplotlib.pyplot as plt
from copy import deepcopy
import logging
import pandas as pd
import numpy as np
import json
import pickle
import itertools

class MuReconType(type):
    def __repr__(self):
        return self.__name__

class MuRecon(object,metaclass=MuReconType):
    def __init__(self,data):
        self.data = data
        # self.recon = pd.DataFrame({},index=np.unique(data.df.index))
    
    def from_SL(data,sl,slstudy_cfg='3n4hits'):
        data_for_recon = data.copy()
        data_for_recon.add_filter(load_cfg(SLStudy,config_name='_'.join([f'0{sl}',slstudy_cfg])))
        
        recon = SLRecon(data_for_recon,sl)
        return recon

    def save(self,path):
        with open(path,'wb+') as file:
            pickle.dump(self.copy(),file)
    
    def load(path):
        with open(path,'rb') as file:
            return pickle.load(file)
    
    def copy(self):
        return deepcopy(self)



class SLRecon(MuRecon,metaclass=MuReconType):
    def __init__(self,data,sl):
        super().__init__(data)
        self.sl = sl

    def get_pattern(self):
        if not hasattr(self, 'pattern'):
            return self.pattern_analysis()
        else:
            return self.pattern

    def pattern_analysis(self):
        df = self.data.df
        df = df[df['sl'] == self.sl].drop(['sl'],axis='columns')
        # df = df\
        #     .reset_index()\
        #     .set_index(['layer','EventNr'])\

        patt = pd.DataFrame({})
        for i in layers:
            layer_i = df.loc[df['layer']==i]['cell']
            nan_idx = set(df.index) - set(layer_i.index)
            nan_ser = pd.Series(np.nan*np.ones(len(nan_idx)),index=nan_idx)
            patt[f'l{i}'] = pd.concat([layer_i,nan_ser]).sort_index()
        # print(patt)
        patt = patt.apply(self.calc_pattern,axis=1)
        # Eliminamos las filas que no hayan sido reconocidas por el patrón,
        # y, por tanto, que no se puedan analizar.
        # self.data.df = self.data.df.loc[patt.index] #RECUERDA DESCOMENTAR ESTO
        self.pattern = patt
        return patt
      
    def calc_pattern(self,ser):
    
        # Según la existencia de un hit en la capa 4, escogemos la capa de referencia.
        # Calculamos la celda de referencia.
        if len(ser.dropna())==len(ser.index):
            ref_cell = ser.l4
            ref_layer = 4
            nhits=4
        else:
            nhits = 3
            if np.isnan(ser.l4):
                ref_cell = ser.l3
                ref_layer = 4
            else:
                ref_cell = ser.l4
                ref_layer = 3
        
        cells = ser[['l4','l3','l2','l1']]
        
        # Calculamos las posiciones relativas de los hits con respecto al superior.
        rel_cells = tuple(cells-ref_cell)
        
        diff = np.diff(cells)
        diff = np.where(np.isnan(diff),None,diff)

        # Con la ayuda de este diccionario, sabemos si se encuentran a la dcha o izda
        # de la capa anterior.
        ID_dict = [
            {-1 : 'L', 0 : 'R', None : 'X'},
            { 0 : 'L', 1 : 'R', None : 'X'},
            {-1 : 'L', 0 : 'R', None : 'X'},
            ]
        pattID =  ''.join([
            ID_dict_i.get(diff[i],'#')              # Evaluamos el diccionario con valor por defecto "X"
            for i, ID_dict_i in enumerate(ID_dict)  # Leemos los valores relativos y su índice.
        ])
                
        if '#' in pattID:
            return

        
        result = pd.Series(
            [nhits,ref_layer,ref_cell,rel_cells,pattID],
            index = ['nhits','ref_layer','ref_cell','rel_cells','pattID']
        )

        return result
        
    def get_T0(self):
        return self.data.get_T0().loc[self.sl]
    
    def get_dT0(self):
        return self.data.get_dT0().loc[self.sl]
    
    def get_meantimers(self):
        logging.debug(
            '\n'
            '\n#######################################'
            '\nIN : MuData.get_meantimers'
            '\n#######################################'
            '\n'
        )

        if not hasattr(self,'MT'):
            logging.debug(
                f'\n\t- No hay meantimers calculados. Calculando...'
            )
            logging.debug(
            '\n#######################################'
            '\nOUT : MuData.get_meantimers'
            '\n#######################################'
            '\n'
        )
            return self.calc_meantimers()
        else:
            logging.debug(
                f'\n\t- Recuperando el valor de los MT...'
            )
            logging.debug(
            '\n#######################################'
            '\nOUT : MuData.get_meantimers'
            '\n#######################################'
            '\n'
        )
            return self.MT

    def calc_meantimers(self):
        logging.debug(
            '\n'
            '\n#######################################'
            '\nIN : MuData.calc_meantimers'
            '\n#######################################'
            '\n'
        )
        
        logging.debug(
            '\n\t- Calculado los meantimers...'
        )
        data = self.data
        sl = self.sl

        MT = pd.DataFrame({})
        MT['MT1'] = 0.5*(data.get_DT_by_layer(sl,1) + data.get_DT_by_layer(sl,3))\
            + data.get_DT_by_layer(sl,2)
        MT['MT2'] =  0.5*(data.get_DT_by_layer(sl,2) + data.get_DT_by_layer(sl,4))\
            + data.get_DT_by_layer(sl,3)

        logging.debug(
            '\n\t- Calculados. Corrigiendo con T0...'
        )
        
        MT = MT - 2*self.get_T0()

        logging.debug(
            '\n\t- Asignando valor a self.MT...'
        )

        self.MT = MT

        logging.debug(
            '\n\t- Listo.'
        )
        logging.debug(
            '\n#######################################'
            '\nOUT : MuData.get_meantimers'
            '\n#######################################'
            '\n'
        )
        return MT

    def plot2d_MT(
            self,
            xrange = (0,900),
            **hist2d_params
        ):
        MT = self.get_meantimers()

        x = MT[(MT['MT1'] > xrange[0]) & (MT['MT1'] < xrange[1])]['MT1']
        y = MT[(MT['MT2'] > xrange[0]) & (MT['MT2'] < xrange[1])]['MT2']
        
        self.plot2d_hist(x,y,**hist2d_params)
    
    def get_driftimes(self):
        return self.data.get_driftimes(self.sl)

    def fit_traces_4hits(self,plot=False,log=True):
        
        logging.debug(f'Comenzamos el ajuste a 4 trazas para la SL {self.sl}')

        df = self.gather_data()
        df = df[df.nhits == 4]

        # TODO: Se podría intentar hacerlo con threading para
        # que se pueda hacer en paralelo. Con un lock, una lista
        # y varios threads. No sé si gaejupyter tolera threads.
        fits = df.apply(lambda ser: self.fbt_4hits(ser,plot=plot,log=log),axis=1).dropna()
        # self.fits = fits
        return fits

    def calc_vdrift(self,bins=100,range=(300,450),plot=False):
        MT = self.get_meantimers()
        centers = []
        for mt_i in ['MT1','MT2']:
            counts, edges = np.histogram(MT[mt_i],bins=bins,range=range)
            mids = (edges[:-1]+edges[1:])/2
            model = GaussianModel()
            params = model.guess(counts,x=mids)
            result = model.fit(counts,params,x=mids)
            centers.append(result.values['center'])

            if plot:
                plt.figure()
                result.plot_fit()
        self.vdrift = cell_width/np.mean(centers)/2
        return self.vdrift
        
        ## TERMINAR. MIRAR GUÍA:
        ## https://lmfit.github.io/lmfit-py/examples/example_two_dimensional_peak.html
        
    def get_vdrift(self):
        if not hasattr(self, 'vdrift'):
            return self.calc_vdrift()
        else:
            return self.vdrift
    
    def check_sanity(self):
        mtimers = self.get_meantimers()
        patt = self.get_pattern()
        try:
            assert (set(mtimers.index) == set(patt.index))
        except AssertionError:
            mtimers = mtimers.loc[patt.index]
            self.MT = mtimers

    def gather_data(self):
        self.check_sanity()
        mtimers = self.get_meantimers()
        patt = self.get_pattern()
        dtimes = self.get_driftimes()
        if hasattr(self,'fits'):
            fits = self.get_fits()
            return pd.concat([patt, fits,dtimes,mtimers], axis=1)
        else:
            return pd.concat([patt,dtimes,mtimers], axis=1)

    @staticmethod
    def get_lat(pattID):
        if 'X' in pattID:
            missing_cells = pattID.count('X')
            missing_patt = list(map(lambda x: ''.join(x),itertools.product('LR',repeat=missing_cells)))
            recon_lat = []
            for patt_i in missing_patt:
                recon_patt_i = pattID
                for patt_ij in patt_i:
                    recon_patt_i = recon_patt_i.replace('X',patt_ij,1)
                recon_lat += patt_dict[recon_patt_i]['lats']
            
            lat_list = list(np.unique(recon_lat))
            
            # print(missing_cells)
            # print(missing_patt)

        else:
            lat_list = patt_dict[pattID]['lats']
        
        # print(lat_list)
        return lat_list

    def fbt_4hits(self,ser,plot=False,log=True):
        # Fit Best Track
        # display(ser)
        
        try:
            # if vmode == 'dynamic':
            #     vdrift = 0.5*cell_width/ser[['MT1','MT2']].mean()
            # elif vmode == 'default':
            #     vdrift= default_vdrift
            vdrift = self.get_vdrift()
                            
            lat_list = self.get_lat(ser['pattID'])
            coef = np.stack(list(map(
                lambda x: lat_dict[x],
                lat_list
            )))[:,::-1]
            n_rel = np.array(ser['rel_cells'])[::-1]
            n_ref = ser['ref_cell']
            t = ser[['t1','t2','t3','t4']].to_numpy() - self.get_T0()
            sl_ref_height = sl_height[self.sl-1]
            
        except KeyError as err:
            display(ser)
            raise err

        # Diferentes posiciones según las posibles lateralidades
        x_array = layer_offset + cell_width*(n_ref + n_rel) + coef*t*vdrift
        
        
        if log:
            logging.debug(
                f'\n#===============================#'+
                f'\n|  Ajustando EventNr{ser.name}  |'+
                f'\n#===============================#'+
                f'\n\tVelocidad: {vdrift*1e3:.2f} μm/ns'+
                f'\n\tPatrón de incidencia: {ser.pattID}'+
                f'\n\tPosibles lateralidades:'+
                '\n\t\t'.join(lat_list)+
                f'\nCelda de incidencia: {n_ref}'
            )
        
              
        result_list = []
        stat_list = []
        if plot:
            fig,axes = plt.subplots(coef.shape[0],1,figsize=(13,8),sharex=True)
            # fig.subplots_adjust(0,0,1,1,0,0)
            axes = axes.ravel()
        for i,x_i in enumerate(x_array):
            if plot:
                    ax_i = axes[i]
                    ax_i.set_title(f'Combinación {i}')
                    ax_i.set_ylim(-4*cell_height,0)
                    ax_i.set_xlim(0,(ncells+0.5)*cell_width)
                    # ax_i.set_xlim((n_ref-2)*cell_width,(n_ref+1)*cell_width)
                    ax_i.plot(
                            x_i,
                            wire_height,
                            linestyle='none',
                            marker='x',
                            color='xkcd:bright blue',
                            zorder = 1
                        )
                    self.plot_cells(ax=ax_i,ref_cells = n_ref+n_rel)
            try:
                # TODO: Esto deberían ser las incertidumbres de las posiciones
                sigma = 1*np.ones_like(wire_height) # Tomo 1 mm que es la precisión de la medida
                args, cov = curve_fit(
                    self.f_track,
                    wire_height+sl_ref_height,
                    x_i,
                    sigma=sigma,
                    # p0 = [0,0]
                )

                x_fit = self.f_track(wire_height,*args)
                res = x_i - x_fit

                # Cálculo de R2
                ss_res = (res**2).sum()
                ss_tot = np.sum((wire_height-np.mean(wire_height))**2)
                r2_i =  1 - (ss_res / ss_tot)

                # Cálculo de chi2
                chi2_i = np.power(res/sigma,2).sum()

                # Añadimos los resultados a una lista
                result_list.append([*args,r2_i,chi2_i,res])
                stat_list.append(chi2_i)
                if plot:
                    y_plt = np.linspace(wire_height.min()-cell_height,wire_height.max()+cell_height,21)
                    ax_i.plot(self.f_track(y_plt,*args),y_plt,linestyle='dashed')
                
            except RuntimeError:
                # 2 es el número de argumentos que toma la función de tracking
                result_list.append([*(np.nan*np.ones(2)),0,np.inf,np.nan])
                stat_list.append(np.inf)
                pass
            if log:
                logging.debug(
                    f'\n'+
                    f'\n‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾'+
                    f'\n\t\t\tLATERALIDAD: {lat_list[i]}'+
                    f'\n____________________________________________________'+
                    f'\n\tR2:   {r2_i:.2f}'+
                    f'\n\tchi2: {chi2_i:.2f}'
                )
        iloc = np.argmin(stat_list)

        if plot:
            fig.suptitle(f'Combinación escogida: {iloc}')
            plt.show()
        
        if log:
            logging.debug(
                f'\n'+
                f'\n____________________________________________________'+
                f'\n\t\t\tLATERALIDAD ESCOGIDA: {lat_list[iloc]}'+
                f'\n‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾'+
                f'\n\tR2:   {result_list[iloc][-3]:.2f}'+
                f'\n\tchi2: {result_list[iloc][-2]:.2f}'+
                f'\n\n'
            ) 
        return pd.Series([*result_list[iloc],self.coefs_to_ID(coef[iloc])],index=['theta','x0','r2','chi2','res','latID'])

    def fbt_3hits(self,ser,plot=False):
        # Fit Best Track
        # print(ser)

        # if vmode == 'dynamic':
        #     vdrift = 0.5*cell_width/ser[['MT1','MT2']].mean()
        #     if np.isnan(vdrift): vdrift = default_vdrift #TODO: No sé si hay un modo alternativo de mirarlo

        # elif (vmode == 'default'):
        #     vdrift= default_vdrift
        vdrift = self.get_vdrift()

        lat_list = self.get_lat(ser['pattID'])
        coef = np.stack(list(map(
            lambda x: lat_dict[x],
            lat_list
        )))[:,::-1]
        n_rel = np.array(ser['rel_cells'])[::-1]
        n_ref = ser['ref_cell']
        t = ser[['t1','t2','t3','t4']].to_numpy() - self.get_T0()
        sl_ref_height = sl_height[self.sl-1]

        # Diferentes posiciones según las posibles lateralidades
        x_array = layer_offset + cell_width*(n_ref + n_rel) + coef*t*vdrift
        y_array = wire_height+sl_ref_height
        where_missing = pd.isna(x_array).any(axis=0)

        # print(x_array)
        # print(where_missing)

        result_list = []
        stat_list = []
        if plot:
            fig,axes = plt.subplots(coef.shape[0],1,figsize=(13,8),sharex=True)
            # fig.subplots_adjust(0,0,1,1,0,0)
            axes = axes.ravel()
        for i,x_i in enumerate(x_array):
            x_i= x_i[~where_missing]
            y_i = y_array[~where_missing]
            if plot:
                #TODO: Esto va a dar problemas cuando la celda de referencia sea de la capa 3
                ax_i  =axes[i]
                ax_i.set_title(f'Combinación {lat_list[i]} ({i})')
                ax_i.set_ylim(-4*cell_height,0)
                ax_i.set_xlim(0,(ncells+0.5)*cell_width)
                # ax_i.set_xlim((n_ref-2)*cell_width,(n_ref+1)*cell_width)
                ax_i.plot(
                        x_i,
                        y_i,
                        linestyle='none',
                        marker='x',
                        color='xkcd:bright blue',
                        zorder = 1
                    )
                self.plot_cells(ax=ax_i,ref_cells = n_ref+n_rel)
            try:
                # TODO: Esto deberían ser las incertidumbres de las posiciones
                sigma = 1*np.ones_like(y_i) # Tomo 1 mm que es la precisión de la medida
                args, cov = curve_fit(
                    self.f_track,
                    y_i,
                    x_i,
                    sigma=sigma,
                    # p0 = [0,0]
                )

                x_fit = self.f_track(y_i,*args)
                res = x_i - x_fit

                # Cálculo de R2
                ss_res = (res**2).sum()
                ss_tot = np.sum((y_i-np.mean(y_i))**2)
                r2_i =  1 - (ss_res / ss_tot)

                # Cálculo de chi2
                chi2_i = np.power(res/sigma,2).sum()

                # Añadimos los resultados a una lista
                result_list.append([*args,r2_i,chi2_i,res])
                stat_list.append(chi2_i)
                if plot:
                    y_plt = np.linspace(y_i.min()-cell_height,y_i.max()+cell_height,21)
                    ax_i.plot(self.f_track(y_plt,*args),y_plt,linestyle='dashed')
                
            except RuntimeError:
                # 2 es el número de argumentos que toma la función de tracking
                result_list.append([*(np.nan*np.ones(2)),0,np.inf,np.nan])
                stat_list.append(np.inf)
                pass

        iloc = np.argmin(stat_list)

        # Indicamos la celda en la que hay una ambigüedad.
        latID = list(lat_list[iloc])
        latID[where_missing.argmax()] = 'X'
        latID = ''.join(latID)

        # display(pd.DataFrame(result_list,columns=['theta','x0','r2','chi2','res']))
        if plot:
            fig.suptitle(f'Combinación escogida: {lat_list[iloc]} ({iloc})')
            plt.show()
        return pd.Series([*result_list[iloc],latID],index=['theta','x0','r2','chi2','res','latID'])

    def f_track(self,y,theta,x0):
        # print(wire_height)
        # return theta*y + x0
        return y/np.tan(np.pi/2-theta) + x0
    
    def plot_cells(self,ax=None,ref_cells=None):
        cell_linestyle = dict(
            lw=0.5,
            color='k',
            zorder=-1
        )

        wire_linestyle = dict(
            marker='o',
            linestyle='none',
            color='k',
            zorder=-1,
            markersize=3
        )

        if ax is None:
            ax = plt.gca()

        xlim = ax.get_xlim()
        cell_heights = -np.arange(5)*cell_height
        ax.hlines(cell_heights,*xlim,**cell_linestyle)

        x_wire = (1+np.arange(ncells))*cell_width + layer_offset.reshape(4,1)
        
        ax.plot(
            x_wire,
            wire_height,
            **wire_linestyle,
            )

        for i in range(len(layers)):
            x_wire_i = x_wire[-i]
            ax.vlines(
                x_wire_i,
                ymin=cell_heights[i],
                ymax = cell_heights[i+1],
                **cell_linestyle
            )
            for j in range(ncells):
                ax.add_patch(
                    patches.Rectangle(
                        (x_wire_i[j]-0.5*cell_width,wire_height[i]-0.5*cell_height),
                        cell_width,
                        cell_height,
                        fc = 'xkcd:ecru',
                        zorder=-3
                    )
                )



        if not ref_cells is None:
            x_cell = layer_offset + cell_width*ref_cells - 0.5*cell_width
            y_cell = wire_height - 0.5*cell_height
            xy_cells = np.c_[x_cell,y_cell]
            for xy_cell in xy_cells:
                cell = patches.Rectangle(
                        xy_cell,
                        cell_width,
                        cell_height,
                        fc='xkcd:amber',
                        zorder=-2
                    )
                ax.add_patch(cell)
          
    def fit_traces_3hits(self,plot=False):
        df = self.gather_data()
        df = df[df.nhits == 3]
        # TODO: Se podría intentar hacerlo con threading para
        # que se pueda hacer en paralelo. Con un lock, una lista
        # y varios threads. No sé si gaejupyter tolera threads.
        fits = df.apply(lambda ser: self.fbt_3hits(ser,plot=plot),axis=1)
        # self.fits = fits
        return fits

    def fit_traces(self,n4 = True, n3 = True, plot=False, log=True):
        if n4:
            fit4 = self.fit_traces_4hits(plot=plot,log=log)
        else:
            fit4 = pd.DataFrame({})
        if n3:
            fit3 = self.fit_traces_3hits(plot=plot)
        else:
            fit3 = pd.DataFrame({})
        
        fits = pd.concat((fit4,fit3),axis=0)
        self.fits = fits
        return fits

    def get_fits(self):
        if not hasattr(self, 'fits'):
            return self.fit_traces()
        else:
            return self.fits

    @staticmethod
    def coefs_to_ID(coefs):
        lat_dict = {
            -1  :   'L',
             1  :   'R'
        }

        ID = ''.join([lat_dict[coef] for coef in coefs])
        return ID

    def plot2d_theta_cell(self,**hist_params):
        x = self.get_pattern()['ref_cell']
        y = self.get_fits()['theta']
        self.plot2d_hist(x,y,**hist_params)
    
    def plot2d_theta_pos(self,**hist_params):
        patt = self.get_pattern()
        fits = self.get_fits()
        x = fits.x0
        y = fits.theta

        self.plot2d_hist(x,y,**hist_params)

    def plot2d_residual_cell(self,layer=4,**hist_params):
        patt = self.get_pattern()
        fits = self.get_fits()

        x = patt.ref_cell
        #y = np.c_[*fits['res'].to_list()] #TODO: Próximamente
        residuals = np.array(fits['res'].to_list())
        y = pd.DataFrame(
                residuals,
                columns = [f'l{i}' for i in layers],
                index=x.index
            )[f'l{layer}']

        self.plot2d_hist(x,y,**hist_params)
    
    def plot2d_residual_pos(self,layer=4,**hist_params):
        #TODO: Hay que adaptar esta a 3hits
        patt = self.get_pattern()
        fits = self.get_fits()
        x = fits.x0
        #y = np.c_[*fits['res'].to_list()] #TODO: Próximamente
        residuals = np.array(fits['res'].to_list())
        y = pd.DataFrame(
                residuals,
                columns = [f'l{i}' for i in layers],
                index=x.index
            )[f'l{layer}']
        
        
        self.plot2d_hist(x,y,xbin1d=cell_width,ybin1d=(y.max()-y.min())/300,**hist_params)
        
    def plot2d_hist(self,x,y,ncontours=10,xbin1d=1.2,ybin1d=1.2,contour=True):
        fig = go.Figure()
        if contour:
            fig.add_trace(go.Histogram2dContour(
                    x = x,
                    y = y,
                    colorscale = 'hot',
                    reversescale = True,
                    xaxis = 'x',
                    yaxis = 'y',
                    ncontours = ncontours
                ))
        fig.add_trace(go.Scatter(
                x = x,
                y = y,
                xaxis = 'x',
                yaxis = 'y',
                mode = 'markers',
                marker = dict(
                    color = 'rgba(0,0,0,0.1)',
                    size = 3
                )
            ))
        fig.add_trace(go.Histogram(
                y = y,
                xaxis = 'x2',
                marker = dict(
                    color = 'rgba(0,0,0,1)'
                ),
                ybins=dict(size=xbin1d)

            ))
        fig.add_trace(go.Histogram(
                x = x,
                yaxis = 'y2',
                marker = dict(
                    color = 'rgba(0,0,0,1)'
                ),
                xbins=dict(size=ybin1d)
            ))

        fig.update_layout(
            autosize = False,
            xaxis = dict(
                zeroline = False,
                domain = [0,0.85],
                showgrid = False
            ),
            yaxis = dict(
                zeroline = False,
                domain = [0,0.85],
                showgrid = False
            ),
            xaxis2 = dict(
                zeroline = False,
                domain = [0.85,1],
                showgrid = False
            ),
            yaxis2 = dict(
                zeroline = False,
                domain = [0.85,1],
                showgrid = False
            ),
            height = 600,
            width = 600,
            bargap = 0,
            hovermode = 'closest',
            showlegend = False
        )

        fig.show()
    
    def plot_selection(self,where,path,show=False):
        idx = where.index[where]
        data = self.gather_data().loc[idx]
        
        for idx,ser in data.iterrows():
            
            x_i,y_i = self.calc_pos(ser)
            
            
            fig_i,ax_i = plt.subplots(1,1,figsize=(13,8))
            ax_i.set_title(f'Combinación {i}')
            ax_i.set_ylim(-4*cell_height,0)
            ax_i.set_xlim(0,(ser.ncells+0.5)*cell_width)
            # ax_i.set_xlim((n_ref-2)*cell_width,(n_ref+1)*cell_width)
            ax_i.plot(
                    x_i,
                    y_i,
                    linestyle='none',
                    marker='x',
                    color='xkcd:bright blue',
                    zorder = 1
                )
            self.plot_cells(ax=ax_i,ref_cells = ser.n_ref+ser.n_rel)
            if show: fig_i.show()
            plt.close()
    
    def calc_pos(self,ser,vmode='dynamic'):
        try:
            if vmode == 'dynamic':
                vdrift = 0.5*cell_width/ser[['MT1','MT2']].mean()
            elif vmode == 'default':
                vdrift= default_vdrift

            coef = lat_dict[ser.latID][::-1]
            n_rel = np.array(ser.rel_cells)[::-1]
            n_ref = ser.ref_cell
            t = ser[['t1','t2','t3','t4']].to_numpy() - self.get_T0()
            
        except KeyError as err:
            display(ser)
            raise err

        # Diferentes posiciones según las posibles lateralidades
        x_array = layer_offset + cell_width*(n_ref + n_rel) + coef*t*vdrift
        y_array = wire_height + sl_height[self.sl-1]
        
        return x_array,y_array
        
        
    