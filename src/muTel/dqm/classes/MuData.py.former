from muTel.utils.meta import    superlayers, layers, vdrift,\
                                patt_dict, wire_height, cell_height,\
                                cell_width, layer_offset
from muTel.utils.config import load_cfg
from muTel.utils.data import display_df
from muTel.dqm.recon import fit_T0

from IPython.display import HTML, display
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.stats import chisquare
import plotly.graph_objs as go
from copy import deepcopy
import logging
import pandas as pd
import numpy as np
import json

class MuDataType(type):
    def __repr__(self):
        return self.__name__
    
    




class MuData(object,metaclass=MuDataType):

    def __init__(self,run,nhits=None,sl=None):
        self.run = run
        self.nhits = nhits
        self.sl = sl
        
        # Velocidad de deriva
        self.vdrift = vdrift

        self.MT = {}

        self.filters = {}
        '''
        TODO:   Se podría añadir el orden en el que se han aplicado los filtros poniendo
                un formato a las keys de la forma "{orden}-{alias}" o almacenándolos
                en un pd.DataFrame.
        '''

        self.read_file(run,nhits,sl)
    
    def copy(self):
        return deepcopy(self)

    def __len__(self):
        return len(self.df.index)

    def _repr_html_(self):
        return self.df.head(5).to_html()
    
    def display(self):
        display_df(self.df)

    def read_file(self,run,nhits=None,sl=None):
        from muTel.utils.data import read_muon
        self.data = read_muon(run,nhits=nhits,sl=sl).set_index('EventNr')
        self.df = self.data.copy(deep=True)

    def add_filter(self,new_filter,alias=None):
        '''
        Función que permite añadir un filtro a los datos. Los filtros usados se guardan
        en un atributo dentro de la clase llamado "filters". De este modo, se puede consultar
        el historial de filtros aplicados.
        '''

        
        new_filter_type = type(new_filter).__name__
        logging.debug(f' Añadiendo filtro {new_filter_type} a un objeto {type(self).__name__}')
        
        if alias is None:
            filter_types = [type(filter_i).__name__ for filter_i in self.filters.values()]
            logging.debug(
                f' Filtros existentes:'+
                ''.join(
                    [
                        f'\n\t{alias_i}\t\t:\t{filter_types[i]}'
                        for i, alias_i in enumerate(self.filters.keys())
                    ]
                )
            )
            Nfits = sum(
                [
                    1 
                    if filter_type_i == new_filter_type
                    else 
                    0 
                    for filter_type_i in filter_types
                ]
            )

            logging.debug(f' Existen ya {Nfits} filtros {new_filter_type}')
            alias = f'{new_filter_type}_{str(Nfits+1).zfill(2):2}'
            logging.debug(
                f' Guardando el nuevo filtro {new_filter_type} '
                f'bajo el alias {alias}'
            )
        else:
            alias = str(alias)
        self.filters[alias] = (new_filter)
        self.df = new_filter.filter(self)
        logging.debug('\n\n\n')

    def __add__(self,other):
        self.df['run'] = self.run
        other.df['run'] = other.run

        new = self.copy()
        new.run = ', '.join((str(self.run),str(other.run)))
        new.df = pd.concat([self.df,other.df], ignore_index=True, axis=0)
        
        return new
    
    def get_filter_by_type(self,filter_type):

        is_type = [
                    filter
                    for filter in self.filters.values()
                    if filter_type == type(filter).__name__
                ]
        
        return is_type

    def get_event(self,eventnr):
        df = self.df
        if eventnr not in df.index:
            raise ValueError(f'El evento {eventnr} no existe.')

        # where = self.df['EventNr']==eventnr
        # return self.df[where]
        return df.loc[eventnr]

    def display_event(self,eventnr):
        
        # Esto está un poco hard-codeado, pero sirve su propósito
        # porque supongo que nadie nunca pondrá 2 filtros de TimeFrame
        
        event_df = self.get_event(eventnr).reset_index()

        tf_filter = self.get_filter_by_type('TimeFrame')

        if len(tf_filter) == 0:
            t_min = event_df.DriftTime.min()
            t_max = event_df.DriftTime.max()
        else:
            t_min = tf_filter[0].tmin
            t_max = tf_filter[0].tmax


        
        
        styled_df = event_df\
            .drop(['GEO','hit','channel','EventNr'], axis='columns')\
            .sort_values(['sl','layer','cell'])\
            .style.format({
                'DriftTime' : '{:20.2f} ns'
            })\
            .hide_index()\
            .bar(
                subset=["DriftTime",],
                color='#8e82fe',
                vmin = t_min,
                vmax = t_max
            )\
            .set_caption(f'<b><p style="font-size:20px">Event {eventnr}</p></b>')\
            .set_table_styles([dict(selector='th', props=[('text-align', 'center')])])

        display(styled_df)
        return
    
    def get_efficiency(self):
        N_i = np.unique(self.data.index).size
        return self.NEvents()/N_i
    
    def NEvents(self):
        return np.unique(self.df.index).size

    def clean(self,config={}):
        from muTel.dqm.classes.Filters import Drop, DropTrigger,TimeFrame

        self.add_filter(load_cfg(Drop,config_name=config.get('Drop','default')))
        self.add_filter(load_cfg(DropTrigger))
        self.add_filter(load_cfg(TimeFrame))

        return self

    def get_T0(self,nbins=100):
        if not hasattr(self, 'T0'):
            return self.calc_T0(nbins=nbins)['T0']
        else:
            return self.T0['T0']

    def get_dT0(self,nbins=100):
        if not hasattr(self, 'T0'):
            return self.calc_T0(nbins=nbins)['dT0']
        else:
            return self.T0['dT0']

    def calc_T0(self,nbins=100,T0_corr=1.5,plot=False):
        if plot:
            fig,axes = plt.subplots(2,2,figsize=(13,9))
            axes = axes.ravel().tolist()
        else:
            axes = None


        try:
            tf_filter = self.get_filter_by_type('TimeFrame')[0]
        except:
            tf_filter = None
        gb = self.df.reset_index().groupby(['sl'], group_keys=True)
        self.T0 = gb.apply(
            lambda ser: fit_T0(
                ser,nbins=nbins,tf_filter=tf_filter,
                T0_corr=T0_corr,axes=axes
                )
            )
        if plot:
            fig.show()
            


        return self.T0

    def get_DT_by_layer(self,sl,layer):
        df = self.df
        dt_layer = df[df['sl'] == sl]\
            .drop('sl',axis='columns')\
            .reset_index()\
            .set_index(['layer','EventNr'])\
            .loc[layer,:]['DriftTime']
        
        return dt_layer

    def get_driftimes(self,sl):
        t_list = [self.get_DT_by_layer(sl,i).rename(f't{i}').to_frame() for i in layers]
        df = t_list[0]
        for i in range(1,len(layers)):
            df = df.join(t_list[i],how='outer')
        return df

        

# if __name__ == '__main__':
    # from muTel.dqm.classes.filters import Drop
    # from muTel.utils.config import load_cfg
    # muon_data = MuData(588,sl=1,nhits=4)
    # display(muon_data)
    # muon_data.add_filter(load_cfg(Drop))